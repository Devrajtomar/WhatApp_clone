// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  Name                String?
  Email               String?   @unique
  EmailVerified       DateTime?
  about               String @default("Hey i'm using messenger!")
  loginToken          String?
  image               String @default("https://res-console.cloudinary.com/messengermessenger/thumbnails/transform/v1/image/upload/Y19saW1pdCxoXzE2MDAsd18xNjAwLGZfanBnLGZsX2xvc3N5LmFueV9mb3JtYXQucHJlc2VydmVfdHJhbnNwYXJlbmN5LnByb2dyZXNzaXZl/v1/cnN1eWxpbnc2Y2ZnaW9weGRuYno=/template_primary")
  hashedPassword      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
    
  conversationIds     String[] @db.ObjectId
  conversations       Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds      String[] @db.ObjectId
  seenMessages        Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  seenStoriesIds      String[] @db.ObjectId
  seenStories         Story[] @relation("Seen",fields: [seenStoriesIds], references: [id])

  RecievedRequests    Request[] @relation("Recieved")
  SendRequests        Request[] @relation("Sent")


  callIds             String[] @db.ObjectId
  Calls               Call[] @relation(fields: [callIds],references: [id])
  Stories             Story[]
  accounts            Account[]
  messages            Message[]
  friendsIds String[] @db.ObjectId
  friends             User[]  @relation("friends",fields: [friendsIds], references: [id])




  friendOf            User[] @relation("friends",fields: [friendsIds],references: [id])
}

model Story {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  isDeleted    Boolean @default(false)
  type         String
  DataUrl      String
  description  String?
  createdAt    DateTime @default(now())

  userId       String @db.ObjectId
  user         User @relation(fields: [userId], references: [id])
  SeenUsersIds String[] @db.ObjectId
  SeenUsers    User[] @relation("Seen",fields: [SeenUsersIds],references: [id])
}

model Conversation {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?
  
  messagesIds   String[] @db.ObjectId
  messages      Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Request {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  SenderId   String @db.ObjectId
  Sender     User @relation("Sent",fields: [SenderId], references: [id])
  RecieverId String @db.ObjectId
  Reciever   User @relation("Recieved",fields: [RecieverId], references: [id])
  IsBlocked  Boolean @default(false)
  IsAccepted Boolean @default(false)
  createdAt  DateTime @default(now())
}


model Message {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime @default(now())

  seenIds        String[] @db.ObjectId
  seen           User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       String @db.ObjectId
  sender         User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model Call {
    id                 String @id @default(auto()) @map("_id") @db.ObjectId
    userIds            String[] @db.ObjectId
    users              User[] @relation(fields: [userIds],references: [id])
    type               String
    status             String @default("pending")
    token              String
    isRecorded         Boolean @default(false)
    VideoUrl           String?
    
}